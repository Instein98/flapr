"""
This script is to generate a statment patch generation/validation info file for each defects4j buggy project:
Stmt, isBuggy, patches list, plausible patches list (include correct patches), correct patches list, patches generation time cost (ms), validation all patches time cost (ms)
"""

import os
import json

# the patches dir generated by tbar when generating uniapr style patches
tbarPatchesDir = '/home/yicheng/research/apr/experiments/tbar/patches.bak0726/'

def readPatchInfoFile():
    """
    The modified tbar will generate a json patches.info file when generating uniapr style patches. This function will read the json file and get the data of stmt location, patches list, stmt process time.
    """
    for bugId in os.listdir(tbarPatchesDir):
        if '_' not in bugId:
            continue
        tmp = bugId.split('_')
        pid = tmp[0]
        bid = tmp[1]
        print(bugId)
        patchesInfoFile = os.path.join(tbarPatchesDir, bugId, 'patches-pool', 'patches.info')
        with open(patchesInfoFile, 'r') as file:
            patchesInfo = json.load(file)
            patchesInfo = parseStmtInfo(patchesInfo)
            break

def parseStmtInfo(patchesInfo):
    for stmtDict in patchesInfo:
        location = stmtDict['stmtLocation']
        parseTime = getDictIntValue(stmtDict, 'parseSuspCodeNodeTimeMs')
        genTime = getDictIntValue(stmtDict, 'patchesGenerationTimeMs')
        compilablePatches = []  # only record the patch-pool ids of patches that are compilable
        totalPatchCompilationTime = 0
        cantCompilePatchesNum = 0
        if 'patches' in stmtDict:
            for patchDict in stmtDict['patches']:
                if 'patchPoolId' in patchDict:
                    compilablePatches.append(patchDict['patchPoolId'])
                if 'compilable' not in patchDict or patchDict['compilable'] == False:
                    cantCompilePatchesNum += 1
                totalPatchCompilationTime += patchDict['compilationTimeMs']
        
        stmtProcessTime = parseTime + genTime + totalPatchCompilationTime
        # print(location)
        # print(compilablePatches)
        # print(cantCompilePatchesNum)
        # print(totalPatchCompilationTime)

def getDictIntValue(dic, key):
    return dic[key] if key in dic else 0

if __name__ == '__main__':
    readPatchInfoFile()
        

